#!/usr/bin/env python3

import argparse
import sys
import math

proba = lambda a, t : a * math.exp(-t) + (4 - 3 * a) * math.exp(-2 * t) + (2 * a - 4) * math.exp(-4 * t)

def helpFlag():
    if len(sys.argv) == 2 and sys.argv[1] == "-h":
        print("USAGE")
        print("\t\t./204ducks a")
        print("\nDESCRIPTION")
        print("\t\ta    constant")
        sys.exit(0)

def duckArg():
    try:
        parser = argparse.ArgumentParser(description='204ducks', usage=helpFlag())
        parser.add_argument("a", type=float)
        args = parser.parse_args()
        return args
    except:
        sys.exit(84)

def proba_2(a, t):
    result = -a * math.exp(-t) - (4 - 3 * a) / 2 * math.exp(-2 * t) - (2 * a - 4) / 4 * math.exp(-4 * t)
    return result

def displayTime(t):
    dix = t % 60 / 10
    unit = t % 10
    total_min = t / 60
    print("%dm %d%ds" %(total_min, dix, unit + 1))

def timeDucksBack(a, min):
    i = 1.0
    while (1):
        if (proba_2(a, i / 60) - proba_2(a, 0) >= min):
            return i
        i += 0.01

def main():
    a = duckArg().a

    if a < 0 or a > 2.5:
        sys.exit(84)
    p = 0
    r = 0
    t = 0
    while p < 99.9999:
        p += proba(a, t) / 10
        r += (proba(a, t) / 10) * t
        t += 0.001
    r = (r / 99.9999) + 1./60
    print("Average return time: %dm %02ds" % divmod(r * 60, 60))
    d = 0
    while t > 0:
        d += ((t - r) ** 2) * (proba(a, t) / 10)
        t -= 0.001
    d = (d / 99.999) ** 0.5
    print("Standard deviation: %.3f" % d)

    t = timeDucksBack(a, 0.5)
    print("Time after which 50% of the ducks are back: ", end='')
    displayTime(t)

    t = timeDucksBack(a, 0.99)
    print("Time after which 99% of the ducks are back: ", end='')
    displayTime(t)

    print("Percentage of ducks back after 1 minute: %0.1f%%" %((proba_2(a, 1) - proba_2(a, 0)) * 100))
    print("Percentage of ducks back after 2 minutes: %0.1f%%" %((proba_2(a, 2) - proba_2(a, 0)) * 100))

main()
